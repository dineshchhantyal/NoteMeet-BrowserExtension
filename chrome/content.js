(()=>{"use strict";var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{t:()=>a,P:()=>r});class t{constructor(){this.panel=null,this.minimizedPanel=null,this.meetingsList=null,this.recordButton=null}static createHeader(){return`\n            <div style="text-align: center; margin-bottom: 16px;">\n                <img src="${r.LOGO_URL}" alt="NoteMeet" style="width: 120px;">\n                <h2 style="color: rgb(7, 59, 76); margin: 8px 0 0 0; font-size: 14px;">\n                    NoteMeet\n                </h2>\n            </div>\n        `}static createButton(e,t,n=!1){return`\n            <button \n                id="${t}"\n                style="\n                    width: 100%;\n                    padding: 10px 16px;\n                    border: none;\n                    border-radius: 6px;\n                    font-size: 14px;\n                    font-weight: 500;\n                    cursor: pointer;\n                    transition: all 0.2s ease;\n                    background-color: ${n?"rgb(46, 196, 182)":"rgb(7, 59, 76)"};\n                    color: white;\n                    margin-bottom: 8px;\n                "\n            >\n                ${e}\n            </button>\n        `}static createLoggedInContent(e){return`\n            <div style="text-align: center;">\n                ${this.createHeader()}\n                <div style="display: flex; align-items: center; margin-bottom: 16px;">\n                    <div style="text-align: left;">\n                        <div style="font-weight: 500; color: rgb(7, 59, 76);">${e.name}</div>\n                        <div style="font-size: 12px; color: #666;">${e.email}</div>\n                    </div>\n                </div>\n                <div style="margin-bottom: 16px;">\n                    <div style="font-size: 13px; color: #666; margin-bottom: 4px;">Recordings left this month</div>\n                    <div style="font-size: 24px; font-weight: 600; color: rgb(7, 59, 76);">${e.recordingsLeft??1}</div>\n                    <div style="font-size: 12px; color: #666;">${e.plan??"Free"}</div>\n                </div>\n                <div id="recordingControls">\n                    ${this.createButton("Start Recording","startRecordingButton",!0)}\n                </div>\n                <div style="border-top: 1px solid #eee; margin: 16px 0; padding-top: 16px;">\n                    ${this.createButton("Sync Status","syncStatusButton")}\n                </div>\n            </div>\n        `}static createMeetingItem(e){return`\n            <div class="meeting-item" style="margin-bottom: 10px;">\n                <div class="meeting-title" style="font-weight: bold; color: rgb(7, 59, 76);">${e.title}</div>\n                <button class="meeting-action" style="\n                    padding: 8px 12px;\n                    border: none;\n                    border-radius: 4px;\n                    background-color: rgb(46, 196, 182);\n                    color: white;\n                    cursor: pointer;\n                    transition: background-color 0.2s ease;\n                "\n                id="recordButton_${e.id}">Record</button>\n            </div>\n        `}static createMeetingsList(e){return console.log(e),0===e.length?"":`\n            <div id="noteMeetMeetingsList" style="\n                padding: 16px;\n                background-color: #ffffff;\n                border: 2px solid rgb(46, 196, 182);\n                border-radius: 12px;\n                box-shadow: 0 8px 24px rgba(7, 59, 76, 0.12);\n            ">\n                ${e.map(this.createMeetingItem).join("")}\n            </div>\n        `}static createLoggedOutContent(){return`\n            <div style="text-align: center; padding: 12px 0;">\n                ${this.createHeader()}\n                <p style="color: rgb(7, 59, 76); margin: 0 0 16px 0; font-size: 14px;">\n                    Sign in to start recording your meetings\n                </p>\n                ${this.createButton("Sign In","signInButton",!0)}\n                <p style="margin-top: 12px; font-size: 13px;">\n                    Don't have an account? \n                    <a href=${r.AUTH_BASE_URL}/auth/register\n                       target="_blank"\n                       style="color: rgb(46, 196, 182); text-decoration: none;">\n                      Sign up\n                    </a>\n                </p>\n            </div>\n        `}}class n{static async startRecording(e=null){if(a.isRecordingSetupInProgress)console.warn("Recording setup is already in progress.");else{a.meetingId=e||null,a.isRecordingSetupInProgress=!0;try{let e;if(e=a.meetingId?await new Promise((e=>{chrome.runtime.sendMessage({type:"GET_PRESIGNED_UPLOAD_URL_BY_MEETING_ID",data:{meetingId:a.meetingId}},e)})):await new Promise((e=>{chrome.runtime.sendMessage({type:"GET_PRESIGNED_URL"},e)})),console.log("Response:",e),!e?.success)throw new Error(e?.error||"Failed to get presigned URL");if(a.presignedUrl=e.presignedUrl,!a.presignedUrl)throw new Error("Failed to get presigned URL");o.updateStatus("recording"),await n.setupMediaStreams(),await n.initializeRecorder()}catch(e){o.updateStatus("idle"),console.error("Error starting recording:",e.message),o.resetUI(),alert("Failed to start recording. Please check permissions.")}finally{a.isRecordingSetupInProgress=!1,a.meetingId=null}}}static async setupMediaStreams(){a.mediaState.screenStream=await navigator.mediaDevices.getDisplayMedia({video:{displaySurface:"browser",width:{ideal:1920,max:1920},height:{ideal:1080,max:1080},selfBrowserSurface:"include"},audio:!0,selfBrowserSurface:"include"}),a.mediaState.micStream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!0,noiseSuppression:!0,autoGainControl:!0,channelCount:2},video:!1}),a.mediaState.audioContext=new AudioContext;const e=a.mediaState.audioContext.createMediaStreamDestination();a.mediaState.screenStream.getAudioTracks().length>0&&a.mediaState.audioContext.createMediaStreamSource(a.mediaState.screenStream).connect(e),a.mediaState.micStream.getAudioTracks().length>0&&a.mediaState.audioContext.createMediaStreamSource(a.mediaState.micStream).connect(e),Array.from(document.querySelectorAll("audio, video")).forEach((t=>{t.srcObject&&t.srcObject.getAudioTracks().length>0&&a.mediaState.audioContext.createMediaStreamSource(t.srcObject).connect(e)}))}static async initializeRecorder(){const e=new MediaStream([...a.mediaState.screenStream.getVideoTracks(),...a.mediaState.micStream.getAudioTracks()]);a.mediaState.recorder=new MediaRecorder(e,{mimeType:"video/webm",audioBitsPerSecond:128e3,videoBitsPerSecond:25e5}),a.recordedChunks=[];const t=new WritableStream({write:async(e,t)=>{try{await fetch(a.presignedUrl,{method:"PUT",body:e,headers:{"Content-Type":"video/webm"}})}catch(e){console.error("Error uploading chunk:",e)}}}).getWriter();a.mediaState.recorder.ondataavailable=e=>{e.data.size>0&&(a.recordedChunks.push(e.data),t.write(e.data))},a.mediaState.recorder.start(),o.updateRecordingControls()}static async stopRecording(){try{if(o.updateStatus("processing"),"recording"===a.mediaState.recorder?.state){const e=new Promise((e=>{a.mediaState.recorder.onstop=e}));a.mediaState.recorder.stop(),await e}await this.processRecordedData(),await this.cleanupMediaResources(),o.updateStatus("idle")}catch(e){console.error("Error stopping recording:",e),o.resetUI()}}static async processRecordedData(){const e=new Blob(a.recordedChunks,{type:"video/webm"});return new Promise((t=>{const n=new FileReader;n.onloadend=()=>{a.recordedVideoBase64=n.result,t()},n.readAsDataURL(e)}))}static async cleanupMediaResources(){a.mediaState.screenStream&&a.mediaState.screenStream.getTracks().forEach((e=>e.stop())),a.mediaState.micStream&&a.mediaState.micStream.getTracks().forEach((e=>e.stop())),a.mediaState.audioContext&&await a.mediaState.audioContext.close()}static async getMeetings(){const e=await new Promise((e=>{chrome.runtime.sendMessage({type:"GET_MEETINGS"},e)}));return e.success?e.meetings:[]}}class i{static async checkAuthStatus(){return new Promise((e=>{chrome.runtime.sendMessage({type:"CHECK_AUTH"},(t=>{e(t.user||null)}))}))}static async handleAuth(){const e=`\n            <div style="text-align: center; padding: 12px 0;">\n                ${t.createHeader()}\n                <form id="loginForm" style="display: flex; flex-direction: column; gap: 12px;">\n                    <input \n                        type="email" \n                        id="email" \n                        placeholder="Email"\n                        style="padding: 8px; border-radius: 4px; border: 1px solid #ddd;"\n                    >\n                    <input \n                        type="password" \n                        id="password" \n                        placeholder="Password"\n                        style="padding: 8px; border-radius: 4px; border: 1px solid #ddd;"\n                    >\n                    <button type="submit" style="\n                        padding: 10px 16px;\n                        border: none;\n                        border-radius: 6px;\n                        background-color: rgb(46, 196, 182);\n                        color: white;\n                        cursor: pointer;\n                        position: relative;\n                        min-width: 100px;\n                    " id="loginSubmitButton">\n                        <span>Sign In</span>\n                        <div class="loading-spinner" style="\n                            display: none;\n                            position: absolute;\n                            right: 10px;\n                            top: 50%;\n                            transform: translateY(-50%);\n                            width: 12px;\n                            height: 12px;\n                            border: 2px solid #ffffff;\n                            border-top: 2px solid transparent;\n                            border-radius: 50%;\n                            animation: spin 1s linear infinite;\n                        "></div>\n                    </button>\n                    <a href=${r.AUTH_BASE_URL}\n                        style="font-size: 12px; color: #666; text-decoration: none;">\n                        Use web signin\n                    </a>\n                    <div id="loginError" style="color: red; font-size: 12px; margin-top: 8px; display: none;"></div>\n                </form>\n            </div>\n        `;t.panel.innerHTML=e,this.attachLoginFormListeners()}static attachLoginFormListeners(){const e=document.getElementById("loginForm");e?.addEventListener("submit",this.handleLoginSubmit.bind(this))}static async handleLoginSubmit(e){e.stopPropagation(),e.preventDefault();const n=document.getElementById("loginSubmitButton"),i=n.querySelector(".loading-spinner"),r=n.querySelector("span");try{n.disabled=!0,i.style.display="block",r.textContent="Signing in...";const e={type:"LOGIN",data:{email:document.getElementById("email").value,password:document.getElementById("password").value}};chrome.runtime.sendMessage(e,(e=>{if(e.success)o.updatePanelContent(e.user),t.minimizedPanel.style.display="flex";else{const t=document.getElementById("loginError");t.textContent=e.error||"Login failed",t.style.display="block",n.disabled=!1,i.style.display="none",r.textContent="Sign In"}}))}catch(e){console.error("Login error:",e);const t=document.getElementById("loginError");t.textContent="Login failed",t.style.display="block",n.disabled=!1,i.style.display="none",r.textContent="Sign In"}}}class o{static init(){this.initializeStyles(),this.checkInitialAuth(),this.createFloatingWindow(),this.attachEventListeners()}static initializeStyles(){const e=document.createElement("style");e.textContent="\n            #noteMeetPanel {\n                transition: opacity 0.3s ease, transform 0.3s ease;\n            }\n            #noteMeetMinimizedPanel {\n                transition: opacity 0.3s ease;\n            }\n\n            @keyframes recording-pulse {\n                0% {\n                    box-shadow: 0 0 0 0 rgba(234, 67, 53, 0.4);\n                    border-color: rgba(234, 67, 53, 0.8);\n                }\n                70% {\n                    box-shadow: 0 0 0 15px rgba(234, 67, 53, 0);\n                    border-color: rgba(234, 67, 53, 1);\n                }\n                100% {\n                    box-shadow: 0 0 0 0 rgba(234, 67, 53, 0);\n                    border-color: rgba(234, 67, 53, 0.8);\n                }\n            }\n\n            @keyframes status-dot-pulse {\n                0% {\n                    transform: scale(1);\n                    opacity: 1;\n                }\n                50% {\n                    transform: scale(1.2);\n                    opacity: 0.8;\n                }\n                100% {\n                    transform: scale(1);\n                    opacity: 1;\n                }\n            }\n        ",document.head.appendChild(e)}static createFloatingWindow(){t.minimizedPanel=document.createElement("div"),t.minimizedPanel.id="noteMeetMinimizedPanel",t.minimizedPanel.innerHTML=`<img src="${r.LOGO_URL}" alt="NoteMeet Logo" style="width: 24px; height: 24px;">`,this.applyMinimizedPanelStyles(),t.panel=document.createElement("div"),t.panel.id="noteMeetPanel",this.applyMainPanelStyles(),document.body.appendChild(t.minimizedPanel),document.body.appendChild(t.panel)}static applyMinimizedPanelStyles(){t.minimizedPanel.style.cssText="\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            width: 48px;\n            height: 48px;\n            background-color: #ffffff;\n            border: 2px solid rgb(46, 196, 182);\n            border-radius: 50%;\n            box-shadow: 0 4px 12px rgba(7, 59, 76, 0.12);\n            z-index: 9999;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            opacity: 1;\n            transform: scale(1);\n            user-select: none;\n            -webkit-user-select: none;\n            touch-action: none;\n        "}static async checkInitialAuth(){const e=await i.checkAuthStatus();this.updatePanelContent(e)}static applyMainPanelStyles(){t.panel.style.cssText='\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            width: 280px;\n            height: auto;\n            background-color: #ffffff;\n            border: 2px solid rgb(46, 196, 182);\n            border-radius: 12px;\n            box-shadow: 0 8px 24px rgba(7, 59, 76, 0.12);\n            z-index: 9998;\n            padding: 16px;\n            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n            opacity: 0;\n            visibility: hidden;\n            transform: translateY(-10px) scale(0.95);\n            transform-origin: top right;\n            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            pointer-events: none;\n            user-select: none;\n            -webkit-user-select: none;\n            touch-action: none;\n        '}static updateStatus(e){const n=t.minimizedPanel.querySelector(".recording-status, .processing-status");switch(n&&n.remove(),t.minimizedPanel.style.animation="none",t.minimizedPanel.style.borderColor="",t.minimizedPanel.style.boxShadow="",e){case"recording":t.minimizedPanel.style.animation="recording-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",t.minimizedPanel.style.borderColor="#ea4335",this.addStatusDot("recording-status");break;case"processing":t.minimizedPanel.style.borderColor="#fbbc04",this.addStatusDot("processing-status");break;default:t.minimizedPanel.style.borderColor="rgb(46, 196, 182)",t.minimizedPanel.style.boxShadow="0 4px 12px rgba(7, 59, 76, 0.12)"}}static addStatusDot(e){const n=document.createElement("div");n.className=e,t.minimizedPanel.appendChild(n)}static async updatePanelContent(e){if(e){t.panel.innerHTML=t.createLoggedInContent(e);const i=await n.getMeetings(),o=t.createMeetingsList(i);t.panel.innerHTML+=o,this.attachUserPanelListeners(e)}else{t.panel.innerHTML=t.createLoggedOutContent();const e=t.panel.querySelector("#signInButton");e?.addEventListener("click",(()=>i.handleAuth()))}t.minimizedPanel.addEventListener("mouseenter",this.showPanel.bind(this)),t.panel.addEventListener("mouseleave",this.hidePanel.bind(this))}static attachUserPanelListeners(){const e=t.panel.querySelector("#startRecordingButton"),i=t.panel.querySelector("#syncStatusButton");e?e.addEventListener("click",(()=>n.startRecording())):console.error("Start Recording Button not found!"),i?.addEventListener("click",this.handleSyncStatus.bind(this));const o=t.panel.querySelectorAll("[id^='recordButton_']");console.log("Meeting buttons:",o),o.forEach((e=>{e.addEventListener("click",(()=>{console.log("Record button clicked");const t=e.id.split("_")[1];console.log("Meeting ID:",t),n.startRecording(t)}))}))}static togglePanel(){"flex"===t.minimizedPanel.style.display?this.hidePanel():this.showPanel()}static showPanel(){t.minimizedPanel.style.opacity="0",t.minimizedPanel.style.pointerEvents="none",t.panel.style.visibility="visible",t.panel.style.opacity="1",t.panel.style.pointerEvents="auto",t.panel.style.transform="translateY(0) scale(1)"}static hidePanel(){t.panel.style.opacity="0",t.panel.style.pointerEvents="none",t.panel.style.transform="translateY(-10px) scale(0.95)",setTimeout((()=>{t.panel.style.visibility="hidden"}),300),t.minimizedPanel.style.opacity="1",t.minimizedPanel.style.pointerEvents="auto"}static updateRecordingControls(){const e=t.panel.querySelector("#recordingControls");e.innerHTML=`\n            ${t.createButton("Stop Recording","stopRecordingButton")}\n            <div id="recordingStatus" style="font-size: 12px; color: #666; margin-top: 8px;">\n                Recording in progress...\n            </div>\n        `;const n=e.querySelector("#stopRecordingButton");if(n?.addEventListener("click",this.handleStopRecording.bind(this)),a.meetingId){const e=t.panel.querySelector(`#recordButton_${a.meetingId}`);e.disabled=!0,e.textContent="Recording..."}}static async handleStopRecording(){const e=t.panel.querySelector("#stopRecordingButton");e.disabled=!0,e.textContent="Processing...";try{await n.stopRecording(),this.showPostRecordingControls()}catch(e){console.error("Error in stop recording handler:",e),this.resetUI()}}static showPostRecordingControls(){t.panel.querySelector("#recordingControls").innerHTML=`\n            ${t.createButton("Start New Recording","startRecordingButton",!0)}\n            ${t.createButton("Save Recording Locally","saveRecordingButton")}\n        `,this.attachPostRecordingListeners()}static attachPostRecordingListeners(){const e=t.panel.querySelector("#startRecordingButton"),n=t.panel.querySelector("#saveRecordingButton");e?.addEventListener("click",(()=>{i.checkAuthStatus().then((e=>{e&&this.updatePanelContent(e)}))})),n?.addEventListener("click",this.handleSaveRecording.bind(this))}static async handleSaveRecording(){try{const e=new Blob(a.recordedChunks,{type:"video/webm"}),t=URL.createObjectURL(e),n=document.createElement("a");n.href=t,n.download=`NoteMeet_Recording_${(new Date).toISOString().slice(0,19)}.webm`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(t)}catch(e){console.error("Error downloading recording:",e)}}static async handleSyncStatus(){const e=t.panel.querySelector("#syncStatusButton"),n=e.textContent;e.disabled=!0,e.textContent="Checking sync status...";try{this.showSyncDialog()}catch(t){console.error("Error showing sync status:",t),e.disabled=!1,e.textContent=n+" (Error)"}}static showSyncDialog(){const e=document.createElement("div");e.style.cssText="\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            z-index: 10000;\n            max-width: 400px;\n            text-align: center;\n        ",e.innerHTML='\n            <h3 style="margin: 0 0 15px 0; color: #1a73e8;">✓ All Set!</h3>\n            <p style="margin: 0 0 15px 0; color: #5f6368;">\n                Your notes and recordings are synced with NoteMeet.\n                Visit <a href="https://notemeet.dineshchhantyal.com/dashboard" target="_blank" style="color: #1a73e8; text-decoration: none;">\n                    notemeet.dineshchhantyal.com\n                </a> \n                to access all your content.\n            </p>\n            <button style="\n                background: #1a73e8;\n                color: white;\n                border: none;\n                padding: 8px 16px;\n                border-radius: 4px;\n                cursor: pointer;\n            ">Got it</button>\n        ',document.body.appendChild(e),e.querySelector("button").onclick=()=>{document.body.removeChild(e);const n=t.panel.querySelector("#syncStatusButton");n&&(n.disabled=!1,n.textContent="Sync Status")}}static resetUI(){t.recordButton&&(t.recordButton.textContent="Start Recording",t.recordButton.style.backgroundColor="#1a73e8",t.recordButton.disabled=!1);const e=t.minimizedPanel.querySelector(".loading-indicator");e&&(e.style.display="none")}static attachEventListeners(){const e=document.getElementById("startRecordingButton");e&&e.addEventListener("click",n.startRecording);const t=document.getElementById("syncStatusButton");t&&t.addEventListener("click",this.handleSyncStatus.bind(this));const i=document.getElementById("saveRecordingButton");i&&i.addEventListener("click",this.handleSaveRecording.bind(this))}}const r={AUTH_BASE_URL:"http://localhost:3000",LOGO_URL:chrome.runtime.getURL("icons/icon.png")},a={isRecording:!1,isRecordingSetupInProgress:!1,isExpanded:!1,recordedVideoBase64:null,xOffset:0,yOffset:0,recordedChunks:[],presignedUrl:null,mediaState:{recorder:null,screenStream:null,micStream:null,audioContext:null},meetingId:null};o.init(),class{static init(){chrome.runtime.onMessage.addListener(this.handleMessage.bind(this))}static handleMessage(e,n,i){return"AUTH_STATE_CHANGED"===e.type?(o.updatePanelContent(e.user),t.minimizedPanel.style.display="flex",i({success:!0})):console.warn("Unhandled message type:",e.type),!0}}.init()})();